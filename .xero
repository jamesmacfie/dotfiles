#
# This file contains a few helper functions that make interacting with Xero's dev
# services via the command line a little bit easier. It's all pretty simple, but
# if you always have the command line open then it can speed things up somewhat
#
# Contains:
# Functions to abstract away some of the interactions with Xero Github (saves on
# typing. We all know that's the hardest part about what we do for a job).
#
# An easy shortcut to navigate to the correct TeamCity project (provided you know
# the id of the project you want to view).
#
# A shortcut to navigate to branch environments
#

## XERO GITHUB ##

# VARIABLES
GHURL=`git config xero.url`
GHME=`git config xero.username`
green='\x1B[0;32m' 	#Green text
red='\x1B[1;31m'		#Light red text
cyan='\x1B[0;36m'	#Cyan text
purple='\x1B[1;35m'	#Purple text
orange='\x1B[0;33m'	#Orange text
nc='\x1B[0m'				#No colour text

function x() {
  if [ $# -eq 0 ]
  then
    echo "You need to give Xero Github something to do"
    return
  fi

  case "$1" in

  --help) x-help "${@:2}"
      ;;
  o) x-open "${@:2}"
      ;;
  n) x-stash-new "${@:2}"
      ;;
  p) x-pull-request "${@:2}"
      ;;
  pr) x-pull-request "${@:2}"
      ;;
  cp) x-commit-push "${@:2}"
      ;;
  y) x-commit-push-pull-request "${@:2}"
      ;;
  rm) x-delete-branch "${@:2}"
      ;;
  *) echo -e "Xero Github: '${cyan}$1${nc}' is not a git command. See '${green}xg --help${nc}'"
     ;;
  esac
}

function x-commit-push() {
  if [ $# -eq 0 ]
    then
      echo "You need to enter a commit message"
    return
  fi

  local branch=`git name-rev --name-only HEAD`

  git commit -am "$1"
  git push origin $branch
}

function x-stash-new() {
  if [ $# -lt 2 ]
    then
      echo -e "${red}You need to enter a branch to branch off and a new branch name${nc}"
    return
  fi

  git stash
  git checkout $1
  git checkout -b $2
  git stash pop
}

function x-commit-push-pull-request() {
  if [ $# -eq 0 ]
    then
      echo -e "${red}You need to enter a commit message${nc}"
    return
  fi

  if [ $# -eq 1 ]
    then
      echo -e "${red}You need to enter a commit message and the remote branch for the pull request${nc}"
    return
  fi

  local project=`git rev-parse --show-toplevel`
  local repo=`basename "$project"`
  local branch=`git name-rev --name-only HEAD`

  git commit -am "$1"
  git push origin $branch
  open "$GHURL/Xero/$repo/compare/Xero:$2...$GHME:$branch?expand=1"
}

function x-pull-request() {
  if [ $# -eq 0 ]
  then
    #No parameters passed through. Open up the pull requests for the working directory's repo (if any).
    #This will fail if the current folder is not a git repo
    local isGitDir=`git rev-parse --is-inside-work-tree`
    if [ "$isGitDir" == "true" ]
    then
      local project=`git rev-parse --show-toplevel`
      local repo=`basename "$project"`

      open "$GHURL/Xero/$repo/pulls"
      return
    fi
    return
  fi

  if [ $# -eq 1 ]
  then
    open "$GHURL/Xero/$1/pulls"
    return
  fi

  if [ $# -eq 2 ]
  then
    local project=`git rev-parse --show-toplevel`
    local repo=`basename "$project"`

    open "$GHURL/Xero/$repo/compare/Xero:$1...$GHME:$2?expand=1"
    return
  fi

  if [ $# -eq 3 ]
  then
    open "$GHURL/Xero/$1/compare/Xero:$2...$GHME:$3?expand=1"
    return
  fi
}

function x-open() {
  local project=`git rev-parse --show-toplevel`
  local repo=`basename "$project"`

  open "$GHURL/Xero/$repo"
}

function x-delete-branch() {
    if [ $# -eq 0 ]
      then
        echo -e "${red}You need to enter which branch you want to delete${nc}"
      return
    fi

    git push origin --delete "$1"

}

## END XERO GITHUB ##

function x-help() {

  if [ $# -eq 0 ]
    then
      echo ""
      echo -e "${orange}USAGE${nc}"
      echo -e "\t${red}x ${green}[command]${nc}"
      echo ""
      echo -e "${orange}DESCRIPTION${nc}"
      echo -e "\tThese Xero github functions provide a helper layer between Xero's github enterprise"
      echo -e "\tand the command line. They also provide some helper functionality that abstracts away"
      echo -e "\tsome of the git commands so you dont have to type as much."
      echo ""
      echo -e "${orange}COMMANDS${nc}"
      echo -e "\t${green}o${nc}\tOpens up the Xero github page for the repo in the directory you are in"
      echo -e "\t${green}n${nc}\tStashes any changes you have made to the current branch and creates a new"
      echo -e "\t\ttbranch off of the branch specified in the arguments"
      echo -e "\t${green}p${nc}\tOpens up the pull request page with the correct dropdowns filled in based"
      echo -e "\t\toff the specified repo and branhes"
      echo -e "\t${green}pr${nc}\tAlias for [-p]"
      echo -e "\t${green}cp${nc}\tCommits the current code with the supplied message and pushes the changes"
      echo -e "\t\tto origin"
      echo -e "\t${green}y${nc}\tCommits the current code with the supplied message, pushes the changes to"
      echo -e "\t\torigin and opens up the pull request page with the correct dropdowns filled"
      echo -e "\t${green}rm${nc}\tRemoves a branch (both locally and on origin)"
      echo -e "\t\tin"

      echo -e "For further help type ${red}x --help ${green}[command]${nc}"
      echo ""
    return
  fi

  if [ $# -eq 1 ]
    then
      case "$1" in
        o)	echo ""
            echo -e "${orange}USAGE${nx}"
            echo -e "\t${red}x ${cyan}o ${green}[repoName]${nc}"
            echo ""
            echo -e "${orange}DESCRIPTION${nc}"
            echo -e "\tOpens up the repository Xero Github page in your browser"
            echo ""
            echo -e "${orange}EXAMPLE${nc}"
            echo -e "\t${red}x ${cyan}o ${green}xero${nc}"
            echo ""
            ;;
        n)	echo ""
            echo -e "${orange}USAGE${nc}"
            echo -e "\t${red}x ${cyan}n ${green}[branchOffName] [newBranchName]${nc}"
            echo ""
            echo -e "${orange}DESCRIPTION${nc}"
            echo -e "\tStashes any changes you have made and checks out the branch specified in the"
            echo -e "\tfirst argument. Once that branch has been checked out, it then creates a new"
            echo -e "\tbranch with the name of the second argument."
            echo ""
            echo -e "${orange}EXAMPLE${nc}"
            echo -e "\t${red}x ${cyan}n ${green}develop newBranch${nc}"
            echo ""
            ;;
        p)	echo ""
            echo -e "${orange}USAGE${nc}"
            echo -e "\t${red}x ${cyan}p${nc}"
            echo -e "\t${red}x ${cyan}p ${green}[repoName]${nc}"
            echo -e "\t${red}x ${cyan}p ${green}[branchToMergeTo] [branchToMergeFrom]${nc}"
            echo -e "\t${red}x ${cyan}p ${green}[repoName] [branchToMergeTo] [branchToMergeFrom]${nc}"
            echo ""
            echo -e "${orange}DESCRIPTION${nc}"
            echo -e "\tOpens Xero Github in your browser with all the correct info entered into the"
            echo -e "\tto / from dropdowns (because they are a right pain in the ass to fill in). If you"
            echo -e "\tenter any branch names incorrectly, github (or this script) isn't smart enough"
            echo -e "\tto know that you did a typo and will show you a diff between branches that don't"
            echo -e "\tactually exist."
            echo ""
            echo -e "\tIf no parameters are given and the current folder is a working git repo then"
            echo -e "\tthis will open up the pull request page in the browser."
            echo ""
            echo -e "\tIf one parameter is given then it is assumed that is the name of the repo you"
            echo -e "\twant to view the pull requests for. That repos pull requests will be opened in"
            echo -e "\tyour browser"
            echo ""
            echo -e "\tIf two parameters are given and the current folder is a working git repo then"
            echo -e "\tit will open up a pull request for the current repo."
            echo ""
            echo -e "${orange}EXAMPLE${nc}"
            echo -e "\t${red}x ${cyan}p${nc}"
            echo -e "\t${red}x ${cyan}p ${green}content${nc}${nc}"
            echo -e "\t${red}x ${cyan}p ${green}develop newBranch${nc}${nc}"
            echo -e "\t${red}x ${cyan}p ${green}content develop newBranch${nc}"
            echo ""
            ;;
        pr) echo ""
            echo "Alias for ${cyan}p${nc}"
            echo ""
            ;;
        cp) echo ""
            echo -e "${orange}USAGE${nc}"
            echo -e "\t${red}x ${cyan}cp ${green}\"message\"${nc}"
            echo ""
            echo -e "${orange}DESCRIPTION${nc}"
            echo -e "\tCommits any code changes with the supplied message and then pushes those up to"
            echo -e "\tyour origin. Essentially just the same as doing 'git commit -am \"message\" &&"
            echo -e "\tgit push origin [branch]' (where [branch] is the branch you currently have"
            echo -e "\tchecked out)"
            echo ""
            echo -e "${orange}EXAMPLES${nc}"
            echo -e "\t${red}x ${cyan}cp ${green}\"Here is my commit message\"${nc}"
            echo ""
            ;;
        y) 	echo ""
            echo -e "${orange}USAGE${nc}"
            echo -e "\t${red}x ${cyan}y ${green}\"message\" [branchName]${nc}"
            echo ""
            echo -e "\tCommits any code changes with the supplied message and then pushes those up to"
            echo -e "\tyour origin. Once the code is on your origin then it opens up Xero Github in"
            echo -e "\tyour browser on the pull request page with all the dropdowns filled in correctly."
            echo -e "\tEssentially the same as using 'x cp' and 'x p' with the correct parameters."
            echo ""
            echo -e "${orange}EXAMPLES${nc}"
            echo -e "\t${red}x ${cyan}y ${green}\"Here is my commit message\" develop${nc}"
            echo ""
            ;;
        rm) echo ""
            echo "help for rm"
            echo ""
            ;;
      esac
    return
  fi
}


## XERO GITHUB HELP##

## END XERO GITHUB HELP ##

## BRANCH ##

#Connect to a branch envrionment
function b() {
  if [ $# -eq 0 ]
  then
    echo -e "${red}You need to specify the branch environment${nc}"
    return
  fi
  /usr/bin/open -a "/Applications/Google Chrome.app" "https://go.branch$1.test.xero.com/"
}

## END BRANCH ##

## XERO TEAMCITY ##

function t() {
  if [ $# -eq 0 ]
  then
    open "https://teamcity.dev.xero.com"
    return
  fi

  open "https://teamcity.dev.xero.com/project.html?projectId=$1&tab=projectOverview"
}

## END XERO TEAMCITY ##

## XERO TEAMCITY HELP##

  #TODO

## END XERO TEAMCITY HELP ##

## OTHER ##

# Open chrome in a certain URL
function chr() {
  /usr/bin/open -a "/Applications/Google Chrome.app" "http://$1"
}

## END OTHER ##
